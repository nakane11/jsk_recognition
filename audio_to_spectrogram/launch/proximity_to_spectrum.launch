<launch>

  <arg name="data_topic" default="proximity_sensor"/>
  <arg name="expression_to_get_data" default="m.data" />
  <arg name="data_sampling_rate" default="8" />
  <arg name="fft_sampling_period" default="50.0" />
  <arg name="is_integer" default="true" />
  <arg name="is_signed" default="false" />
  <arg name="bitdepth" default="64" />
  <arg name="n_channel" default="1" />
  <arg name="target_channel" default="0" />
  <arg name="fft_exec_rate" default="50" />
  <arg name="data_amp_plot_max_amp" default="7200.0" />
  <arg name="data_amp_plot_min_amp" default="6200.0" />
  <arg name="data_amp_plot_window_size" default="10.0" />
  <arg name="data_amp_plot_rate" default="10.0" />
  <arg name="gui" default="true" />

  <arg name="spectrum" default="data_to_spectrum/spectrum" />
  <arg name="high_cut_freq" default="4" />
  <arg name="low_cut_freq" default="0" />

  <arg name="preprocessed_spectrum_plot_min_amp" default="0" />
  <arg name="preprocessed_spectrum_plot_max_amp" default="2000" />
  <arg name="preprocessed_spectrum_plot_queue_size" default="1" />
  <arg name="preprocessed_spectrum_plot_max_rate" default="-1" />

  <!-- convert data topic to spectrum topic -->
  <node name="data_to_spectrum"
        pkg="audio_to_spectrogram" type="data_to_spectrum.py"
        respawn="true">
    <remap from="~input" to="$(arg data_topic)" />
    <rosparam subst_value="true">
      expression_to_get_data: $(arg expression_to_get_data)
      data_sampling_rate: $(arg data_sampling_rate)
      fft_sampling_period: $(arg fft_sampling_period)
      is_integer: $(arg is_integer)
      is_signed: $(arg is_signed)
      bitdepth: $(arg bitdepth)
      n_channel: $(arg n_channel)
      target_channel: $(arg target_channel)
      fft_exec_rate: $(arg fft_exec_rate)
    </rosparam>
  </node>

  <node name="spectrogram_source_filter"
        pkg="audio_to_spectrogram" type="spectrum_filter.py"
        respawn="true">
    <remap from="~input" to="$(arg spectrum)" />
    <rosparam subst_value="true">
      data_sampling_rate: $(arg data_sampling_rate)
      high_cut_freq: $(arg high_cut_freq)
      low_cut_freq: $(arg low_cut_freq)
    </rosparam>
  </node>

  <!-- publish amplitude image -->
  <node name="data_amplitude_plot"
        pkg="audio_to_spectrogram" type="data_amplitude_plot.py"
        output="screen">
    <remap from="~input" to="$(arg data_topic)" />
    <rosparam subst_value="true">
      expression_to_get_data: $(arg expression_to_get_data)
      data_sampling_rate: $(arg data_sampling_rate)
      is_integer: $(arg is_integer)
      is_signed: $(arg is_signed)
      bitdepth: $(arg bitdepth)
      n_channel: $(arg n_channel)
      target_channel: $(arg target_channel)
      maximum_amplitude: $(arg data_amp_plot_max_amp)
      minimum_amplitude: $(arg data_amp_plot_min_amp)
      window_size: $(arg data_amp_plot_window_size)
      rate: $(arg data_amp_plot_rate)
    </rosparam>
  </node>

  <group if="$(arg gui)">
    <node pkg="image_view" type="image_view" name="data_amplitude_view"  >
      <remap from="image" to="data_amplitude_plot/output/viz" />
    </node>
  </group>

  <!-- visualize frequency vs amplitude image -->
  <include file="$(find audio_to_spectrogram)/launch/spectrum_plot.launch">
    <arg name="spectrum" value="spectrogram_source_filter/output" />
    <!-- <arg name="spectrum" value="$(arg spectrum)" />     -->
    <arg name="plotter_name" value="preprocessed_spectrogram_source_plot" />
    <arg name="min_amp" value="$(arg preprocessed_spectrum_plot_min_amp)" />
    <arg name="max_amp" value="$(arg preprocessed_spectrum_plot_max_amp)" />
    <arg name="queue_size" value="$(arg preprocessed_spectrum_plot_queue_size)" />
    <arg name="max_rate" value="$(arg preprocessed_spectrum_plot_max_rate)" />
    <arg name="gui" value="$(arg gui)" />
  </include>

</launch>
